diff --git a/dist/TouchBackendImpl.js b/dist/TouchBackendImpl.js
index 161095a0742bc11a0755b842a45d39ad337a15a4..30900a8dd268827f2ed313b3cc3c68265151450b 100644
--- a/dist/TouchBackendImpl.js
+++ b/dist/TouchBackendImpl.js
@@ -236,6 +236,7 @@ export class TouchBackendImpl {
                 this._mouseClientOffset = clientOffset;
             }
             this.waitingForDelay = false;
+            this.options.rootElement.dispatchEvent(new CustomEvent("dragStart"))
         };
         this.handleTopMoveStartDelay = (e)=>{
             if (!eventShouldStartDrag(e)) {
@@ -254,18 +255,30 @@ export class TouchBackendImpl {
             }
         };
         this.handleTopMove = (e1)=>{
-            if (this.timeout) {
+            const clientOffset = getEventClientOffset(e1, this.lastTargetTouchFallback)
+
+            if (clientOffset) {
+              if (!this._mouseClientOffset.hasOwnProperty('x') && !this._mouseClientOffset.hasOwnProperty('y')) {
+                this._mouseClientOffset = clientOffset
+              }
+            } else {
+              return
+            }
+
+            if (
+                this.timeout &&
+                distance(this._mouseClientOffset.x || 0, this._mouseClientOffset.y || 0, clientOffset.x, clientOffset.y) >
+                (this.options.touchSlop ? this.options.touchSlop : 0)
+            ) {
                 clearTimeout(this.timeout);
             }
+
             if (!this.document || this.waitingForDelay) {
                 return;
             }
             const { moveStartSourceIds , dragOverTargetIds  } = this;
             const enableHoverOutsideTarget = this.options.enableHoverOutsideTarget;
-            const clientOffset = getEventClientOffset(e1, this.lastTargetTouchFallback);
-            if (!clientOffset) {
-                return;
-            }
+
             // If the touch move started as a scroll, or is is between the scroll angles
             if (this._isScrolling || !this.monitor.isDragging() && inAngleRanges(this._mouseClientOffset.x || 0, this._mouseClientOffset.y || 0, clientOffset.x, clientOffset.y, this.options.scrollAngleRanges)) {
                 this._isScrolling = true;
@@ -355,6 +368,7 @@ export class TouchBackendImpl {
         this.handleTopMoveEndCapture = (e)=>{
             this._isScrolling = false;
             this.lastTargetTouchFallback = undefined;
+            this._mouseClientOffset = {};
             if (!eventShouldEndDrag(e)) {
                 return;
             }
@@ -363,7 +377,6 @@ export class TouchBackendImpl {
                 return;
             }
             if (e.cancelable) e.preventDefault();
-            this._mouseClientOffset = {};
             this.uninstallSourceNodeRemovalObserver();
             this.actions.drop();
             this.actions.endDrag();
diff --git a/src/TouchBackendImpl.ts b/src/TouchBackendImpl.ts
index f2c164b1157180b6234da5a3cf2f38ddd165929d..a85cd1845fe02f7731cc1afaf67c97f573a4ccee 100644
--- a/src/TouchBackendImpl.ts
+++ b/src/TouchBackendImpl.ts
@@ -377,6 +377,7 @@ export class TouchBackendImpl implements Backend {
 			this._mouseClientOffset = clientOffset
 		}
 		this.waitingForDelay = false
+    this.options.rootElement?.dispatchEvent(new CustomEvent("dragStart"))
 	}
 
 	public handleTopMoveStartDelay = (e: Event): void => {
@@ -409,21 +410,30 @@ export class TouchBackendImpl implements Backend {
 	}
 
 	public handleTopMove = (e: TouchEvent | MouseEvent): void => {
-		if (this.timeout) {
+		const clientOffset = getEventClientOffset(e, this.lastTargetTouchFallback)
+
+		if (clientOffset) {
+			if (!this._mouseClientOffset.hasOwnProperty('x') && !this._mouseClientOffset.hasOwnProperty('y')) {
+				this._mouseClientOffset = clientOffset
+			}
+		} else {
+			return
+		}
+
+		if (
+			this.timeout &&
+			distance(this._mouseClientOffset.x || 0, this._mouseClientOffset.y || 0, clientOffset.x, clientOffset.y) >
+			(this.options.touchSlop ? this.options.touchSlop : 0)
+		) {
 			clearTimeout(this.timeout)
 		}
+
 		if (!this.document || this.waitingForDelay) {
 			return
 		}
 		const { moveStartSourceIds, dragOverTargetIds } = this
 		const enableHoverOutsideTarget = this.options.enableHoverOutsideTarget
 
-		const clientOffset = getEventClientOffset(e, this.lastTargetTouchFallback)
-
-		if (!clientOffset) {
-			return
-		}
-
 		// If the touch move started as a scroll, or is is between the scroll angles
 		if (
 			this._isScrolling ||
@@ -562,6 +572,7 @@ export class TouchBackendImpl implements Backend {
 	public handleTopMoveEndCapture = (e: Event): void => {
 		this._isScrolling = false
 		this.lastTargetTouchFallback = undefined
+		this._mouseClientOffset = {}
 
 		if (!eventShouldEndDrag(e as MouseEvent)) {
 			return
@@ -574,8 +585,6 @@ export class TouchBackendImpl implements Backend {
 
 		if (e.cancelable) e.preventDefault()
 
-		this._mouseClientOffset = {}
-
 		this.uninstallSourceNodeRemovalObserver()
 		this.actions.drop()
 		this.actions.endDrag()
