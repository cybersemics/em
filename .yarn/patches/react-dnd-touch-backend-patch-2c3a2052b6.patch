diff --git a/dist/TouchBackendImpl.js b/dist/TouchBackendImpl.js
index 725715a382d5ac19718cfbdca6732a0d1ddc5092..401b36a8ace589eae757662b707c2f845007e770 100644
--- a/dist/TouchBackendImpl.js
+++ b/dist/TouchBackendImpl.js
@@ -38,6 +38,22 @@ export class TouchBackendImpl {
     get document() {
         return this.options.document;
     }
+
+    // Cancel drag-and-drop if a scroll event is received so that scroll doesn't interfere with dragging.
+    // Use an arrow function to bind this event handler to the TouchBackendImpl object so that we can use `this`.
+    handleScroll = (e) => {
+        if (window['scrolling']) {
+            window.removeEventListener('scroll', this.handleScroll)
+            return
+        }
+        if (this.timeout) {
+            clearTimeout(this.timeout);
+            this.timeout = 0;
+        } else if (this.monitor.isDragging()) {
+            this.actions.endDrag();
+        }
+    }
+
     setup() {
         const root = this.options.rootElement;
         if (!root) {
@@ -242,6 +258,7 @@ export class TouchBackendImpl {
             if (!eventShouldStartDrag(e)) {
                 return;
             }
+            window.addEventListener('scroll', this.handleScroll);
             const delay = e.type === eventNames.touch.start ? this.options.delayTouchStart : this.options.delayMouseStart;
             this.timeout = setTimeout(this.handleTopMoveStart.bind(this, e), delay);
             this.waitingForDelay = true;
@@ -271,6 +288,7 @@ export class TouchBackendImpl {
                 (this.options.touchSlop ? this.options.touchSlop : 0)
             ) {
                 clearTimeout(this.timeout);
+                this.timeout = 0;
             }
 
             if (!this.document || this.waitingForDelay) {
@@ -284,10 +302,13 @@ export class TouchBackendImpl {
                 this._isScrolling = true;
                 return;
             }
+
             // If we're not dragging and we've moved a little, that counts as a drag start
             if (!this.monitor.isDragging() && // eslint-disable-next-line no-prototype-builtins
             this._mouseClientOffset.hasOwnProperty('x') && moveStartSourceIds && distance(this._mouseClientOffset.x || 0, this._mouseClientOffset.y || 0, clientOffset.x, clientOffset.y) > (this.options.touchSlop ? this.options.touchSlop : 0)) {
                 this.moveStartSourceIds = undefined;
+                // window.removeEventListener('scroll', this.handleScroll);
+                console.info('beginDrag')
                 this.actions.beginDrag(moveStartSourceIds, {
                     clientOffset: this._mouseClientOffset,
                     getSourceClientOffset: this.getSourceClientOffset,
@@ -372,7 +393,10 @@ export class TouchBackendImpl {
             if (!eventShouldEndDrag(e)) {
                 return;
             }
-            if (this.timeout) clearTimeout(this.timeout);
+            if (this.timeout) {
+                clearTimeout(this.timeout);
+                this.timeout = 0;
+            }
             if (!this.monitor.isDragging() || this.monitor.didDrop()) {
                 this.moveStartSourceIds = undefined;
                 return;
diff --git a/src/TouchBackendImpl.ts b/src/TouchBackendImpl.ts
index 6650cf98fdb08bca5fa450853cb7907c380fe13e..baee9a1b2c55fc0c2894e134acf85a457e854ef1 100644
--- a/src/TouchBackendImpl.ts
+++ b/src/TouchBackendImpl.ts
@@ -116,6 +116,21 @@ export class TouchBackendImpl implements Backend {
 		return this.options.document
 	}
 
+  // Cancel drag-and-drop if a scroll event is received so that scroll doesn't interfere with dragging.
+  // Use an arrow function to bind this event handler to the TouchBackendImpl object so that we can use `this`.
+	public handleScroll = (): void => {
+    if (window['scrolling']) {
+      window.removeEventListener('scroll', this.handleScroll)
+      return
+    }
+		if (this.timeout) {
+			clearTimeout(this.timeout)
+			this.timeout = 0
+		} else if (this.monitor.isDragging()) {
+			this.actions.endDrag()
+		}
+	}
+
 	public setup(): void {
 		const root = this.options.rootElement
 		if (!root) {
@@ -385,6 +400,7 @@ export class TouchBackendImpl implements Backend {
 			return
 		}
 
+		window.addEventListener('scroll', this.handleScroll)
 		const delay =
 			e.type === eventNames.touch.start
 				? this.options.delayTouchStart
@@ -426,6 +442,7 @@ export class TouchBackendImpl implements Backend {
 			(this.options.touchSlop ? this.options.touchSlop : 0)
 		) {
 			clearTimeout(this.timeout)
+			this.timeout = 0
 		}
 
 		if (!this.document || this.waitingForDelay) {
@@ -465,6 +482,7 @@ export class TouchBackendImpl implements Backend {
 		) {
 			this.moveStartSourceIds = undefined
 
+			window.removeEventListener('scroll', this.handleScroll)
 			this.actions.beginDrag(moveStartSourceIds, {
 				clientOffset: this._mouseClientOffset,
 				getSourceClientOffset: this.getSourceClientOffset,
@@ -578,7 +596,10 @@ export class TouchBackendImpl implements Backend {
 			return
 		}
 
-		if (this.timeout) clearTimeout(this.timeout);
+		if (this.timeout) {
+			clearTimeout(this.timeout)
+			this.timeout = 0;
+		}
 
 		if (!this.monitor.isDragging() || this.monitor.didDrop()) {
 			this.moveStartSourceIds = undefined
