import { store } from '../store'

// util
import {
  equalThoughtRanked,
  flatten,
  getContextsSortedAndRanked,
  head,
  splice,
} from '../util'

/** Merges thoughts into a context chain, removing the overlapping head */
// use autogenerated rank of context
// if there is no/empty context chain, return thoughtsRanked as-is
export const chain = (contextChain, thoughtsRanked, thoughtIndex = store.getState().thoughtIndex) => {

  if (!contextChain || contextChain.length === 0) return thoughtsRanked

  const pivot = head(contextChain[contextChain.length - 1])
  const i = thoughtsRanked.findIndex(child => equalThoughtRanked(child, pivot))
  const append = thoughtsRanked.slice(i - 1)
  const contexts = getContextsSortedAndRanked(pivot.value, thoughtIndex)
  const appendedThoughtInContext = contexts.find(child => head(child.context) === append[0].value)

  return flatten(
    // keep the first segment intact
    // then remove the overlapping head of each one after
    contextChain.concat([
      appendedThoughtInContext
        ? [{ value: append[0].value, rank: appendedThoughtInContext.rank }].concat(append.slice(1))
        : append
    ]).map((thoughts, i) => i > 0 ? splice(thoughts, 1, 1) : thoughts)
  )
}
