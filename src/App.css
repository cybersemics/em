.z-index-popup {
  z-index: var(--z-index-popup);
}
.z-index-command-palette {
  z-index: var(--z-index-command-palette);
}
.z-index-gesture-trace {
  z-index: var(--z-index-gesture-trace);
}
.z-index-navbar {
  z-index: var(--z-index-navbar);
}
.z-index-subthoughts-drop-end {
  z-index: var(--z-index-subthoughts-drop-end);
}
.z-index-stack {
  z-index: var(--z-index-stack);
}
.z-index-hide {
  z-index: var(--z-index-hide);
}
.z-index-scroll-zone {
  z-index: var(--z-index-scroll-zone);
}

.clear {
  clear: both;
}
.relative {
  position: relative;
}
.missing {
  color: #ccc;
}
.direct {
  color: #212121;
}
.center {
  text-align: center;
}
.left {
  text-align: left;
}

@media screen and (min-width: 600px) {
  .center-desktop {
    text-align: center;
  }
}

.text-small {
  font-size: 80%;
}

.text-medium {
  font-size: 90%;
}

.expand-click-area-left {
  padding-left: 10px;
  padding-top: 10px;
  padding-bottom: 10px;
  margin-left: -10px;
}

.expand-click-area-right {
  padding-right: 10px;
  padding-top: 10px;
  padding-bottom: 10px;
}

/* required to avoid iPhone converting to emoji
 https://stackoverflow.com/questions/11178433/how-do-i-stop-ios-from-converting-a-small-pointing-right-triangle-character-into
 */
.left-triangle::after {
  content: '\25C0 \FE0E';
}
.right-triangle::after {
  content: '\25B6 \FE0E';
}

/* Thoughts */

[contenteditable].active-underline:focus {
  border-bottom: solid 1px;
}

.subthought-highlight {
  border-bottom: solid 1px;
}

.children-subheading {
  position: relative;
  margin-top: 3px;
  margin-bottom: 2px;
  padding-bottom: 4px;
}

.down-chevron {
  font-style: normal;
  font-size: 125%;
  line-height: 0;
}

.up-chevron {
  font-style: normal;
  font-size: 75%;
  position: relative;
  top: 2px;
}

.content {
  background-color: white;
  color: #000;
  padding: 80px 10px 153px 50px
    /* padding-bottom must cover the footer (logged out: 79px, logged in: 93px) plus some additional visual spacing */;
  position: relative;
  transition:
    transform 0 ease-out,
    margin 0 ease-out; /* add transition time after initial load and scroll into place */
  box-sizing: border-box; /* make height include padding so that the min-height can be exctly 100vh */
  max-width: 66%;
  margin: 0 auto;
  min-height: 100vh; /* forces footer to bottom when there is little content */
}

@media (max-width: 960px) {
  .content {
    max-width: 80%;
  }
}

@media (max-width: 560px) {
  .content {
    max-width: 50em;
    padding-left: 40px;
  }
}

/* reduce bottom space during tutorial to try to keep the tutorial in view as much as possible */
.content-tutorial {
  min-height: auto;
  padding-bottom: 20px;
}

.dark .root,
.dark .content {
  background-color: black;
  color: white;
}

/* Navigation styles */
.nav {
  position: sticky;
  z-index: var(--z-index-stack);
  padding: 0 15px 0 10px;
  bottom: 0;
}

.nav-container {
  position: absolute;
  width: calc(100% - 30px); /* offset .nav padding */
  transition: background-color 0.2s ease-out;
}

.nav-container .nav-right-button-group {
  display: grid;
  grid-auto-flow: column;
  grid-column-gap: 15px;
  align-items: center;
}

.nav-top {
  top: 0;
}

.nav-bottom {
  padding: 0 15px;
}

.nav-bottom .nav-container {
  position: relative;
  width: 100%;
  display: flex;
  align-items: flex-end;
  /* rounded screens */
  padding-bottom: calc(max(10px, var(--safe-area-bottom)));
}

/* react-transition-group animation: fade */
.fade-enter {
  opacity: 0;
}

.fade-enter-active {
  opacity: 1;
  transition: opacity 0.2s ease-out;
}

.fade-exit {
  opacity: 1;
}

.fade-exit-active {
  opacity: 0;
  transition: opacity 0.2s ease-out;
}

/* react-transition-group animation: fade-slow-out */
.fade-slow-out-enter {
  opacity: 0;
}

.fade-slow-out-enter-active {
  opacity: 1;
  transition: opacity 0.2s ease-out;
}

.fade-slow-out-exit {
  opacity: 1;
}

.fade-slow-out-exit-active {
  opacity: 0;
  transition: opacity 0.8s ease-out;
}

/* react-transition-group animation: slidedown */
/* use transform: translateY(-100%) for auto height animation (less smooth) */
.slidedown-enter {
  margin-bottom: 0;
  margin-top: -3em;
}

.slidedown-enter-active {
  margin-bottom: 1em;
  margin-top: 0;
  transition: margin 150ms ease-out;
}

.slidedown-enter-done {
  margin-bottom: 1em;
  margin-top: 0;
}

.slidedown-exit {
  margin-bottom: 1em;
  margin-top: 0;
}

.slidedown-exit-active {
  margin-bottom: 0;
  margin-top: -3em;
  transition: margin 150ms ease-out;
}

.slidedown-exit-done {
  margin-bottom: 0;
  margin-top: -3em;
}

/* react-transition-group animation: fade-400 */
.fade-400-enter {
  opacity: 0;
}

.fade-400-enter-active {
  opacity: 1;
  transition: opacity 400ms ease 0ms;
}

.fade-400-exit {
  opacity: 1;
}

.fade-400-exit-active {
  opacity: 0;
  transition: opacity 400ms ease 0ms;
}

/* react-transition-group animation: fade-600 */
.fade-600-enter {
  opacity: 0;
}

.fade-600-enter-active {
  opacity: 1;
  transition: opacity 600ms ease 0ms;
}

.fade-600-exit {
  opacity: 1;
}

.fade-600-exit-active {
  opacity: 0;
  transition: opacity 700ms ease 0ms;
}

/* react-transition-group animation: fade-both */
/* eases in and out  */
.fade-both-enter {
  opacity: 0;
}

.fade-both-enter-active {
  opacity: 1;
  transition: opacity 400ms ease-in-out;
}

.fade-both-enter-done {
  opacity: 1;
}

.fade-both-exit-done {
  opacity: 0;
}

.fade-both-exit {
  opacity: 1;
}

.fade-both-exit-active {
  opacity: 0;
  transition: opacity 400ms ease-in-out;
}

/* react-transition-group animation: slide */
.slide-enter {
  transform: translateX(100vw);
  opacity: 0;
  position: absolute;
}

.slide-enter.slide-enter-active {
  transform: translateX(0);
  opacity: 1;
  transition: all 200ms ease-in-out 200ms;
}

.slide-exit {
  transform: translateX(0);
  opacity: 1;
}

.slide-exit.slide-exit-active {
  transform: translateX(-100vw);
  opacity: 0;
}

/* react-transition-group animation: slide-right */
.slide-right-enter {
  transform: translateX(100%);
}

.slide-right-enter-active {
  transform: translateX(0);
  transition: all 200ms ease-out;
}

.slide-right-exit {
  transform: translateX(0);
}

.slide-right-exit-active {
  transform: translateX(100%);
  transition: all 200ms ease-out;
}

.error {
  color: red;
}

.online {
  color: lightgreen;
}

.add-new-thought-link {
  display: inline-block;
  color: #ccc;
  position: relative;
}

.has-other-contexts {
  margin-left: 12px;
}

.add-new-thought {
  outline: none;
  min-width: 3.75em;
  display: inline-block;
  border-bottom: solid 1px #ccc;
  margin-left: -2px;
}

.center-in-content {
  text-align: center;
  margin-left: -30px;
}

.absolute-center {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 10%; /* slightly above the fold */
  left: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  text-align: center;
  user-select: none;
  cursor: default;
}

.text-note {
  font-style: italic;
  color: rgba(7, 7, 7, 0.5);
}

.dark .text-note {
  color: rgba(255, 255, 255, 0.5);
}

/* The placeholder color should be inversed when a light background color is applied. */
/* See: StaticThought */
.text-note.inverse {
  color: rgba(255, 255, 255, 0.5);
}
.dark .text-note.inverse {
  color: rgba(7, 7, 7, 0.5);
}

/* Android Section */

/*### Phone Portrait ### */

@media (max-width: 500px) {
  .android .children-subheading {
    position: relative;
    margin-top: -8px;
    margin-bottom: 2px;
    padding-bottom: 4px;
  }
}

/* Tablet Properties */

@media (min-width: 560px) and (max-width: 1024px) {
  .android .children-subheading {
    position: relative;
    margin-top: -8px;
    margin-bottom: 2px;
    padding-bottom: 4px;
  }
}

/* autofocus */

/*
  At deeper depths, the available width becomes smaller and smaller. Due to the left-translate (above), the left edge will be kept relatively close to the left edge of the screen as one navigates deeper. However its bounding box is the same, so its width will still get smaller and smaller, although it will appear that it is getting compressed from the right. See: https://github.com/cybersemics/em/issues/752.

  Offset this by adding a negative right margin.

  This has the downside of causing multi-line text to reflow as one navigates deeper, as its bounding box is now dependent on its depth in the hierarchy. See: https://github.com/cybersemics/em/issues/251. Only apply this to .autofocus-hide-parent instead of both 2 & 3 so that this side effect is less pronounced. Ultimately there is a natural tradeoff, and it's more important that the full width is preserved.
*/
/*.autofocus-hide-parent {
  margin-right: -1.2em;
}*/

/* for some reason opacity bleeds through modal*/
.dim {
  color: rgba(7, 7, 7, 0.5);
}
.dark .dim {
  color: rgba(255, 255, 255, 0.5);
}

@keyframes fadein {
  from {
    opacity: 0;
  }
  to {
    opacity: 0.99;
  }
}

/* higher precendence than ".dark .modal .a" */

.animate {
  transition: all 0.4s ease-out;
}
.animate-slow {
  transition: all 1s ease-out;
}
.animate-fadeout {
  opacity: 0;
}

@keyframes pulse-light {
  from {
    opacity: 1;
  }
  to {
    opacity: 0.5;
  }
}

/* arrow */
.arrow:after,
.arrow:before {
  border: solid transparent;
  content: ' ';
  height: 0;
  width: 0;
  position: absolute;
  pointer-events: none;
}

.arrow:after {
  border-width: 10px;
}
.arrow:before {
  border-width: 12px;
}

/* arrow left */
.arrow-left:after,
.arrow-left:before {
  right: 100%;
  top: 50%;
}

.arrow-left:after {
  border-right-color: white;
  margin-top: -10px;
}

.arrow-left:before {
  border-right-color: rgba(0, 0, 0, 0.2);
  margin-top: -12px;
}

.dark .arrow-left:after {
  border-right-color: #333;
}
.dark .arrow-left:before {
  border-right-color: rgba(255, 255, 255, 0.15);
}

.arrow-lefttop:after,
.arrow-lefttop:before {
  top: 20px;
}
.arrow-leftbottom:after,
.arrow-leftbottom:before {
  bottom: 20px;
}
.arrow-leftmiddle:after,
.arrow-leftmiddle:before {
  top: 50%;
}

/* arrow up */
.arrow-up:after,
.arrow-up:before {
  bottom: 100%;
  left: 50%;
}

.arrow-up:after {
  border-bottom-color: white;
  margin-left: -10px;
}

.arrow-up:before {
  border-bottom-color: rgba(0, 0, 0, 0.2);
  margin-left: -12px;
}

.dark .arrow-up:after {
  border-bottom-color: #333;
}
.dark .arrow-up:before {
  border-bottom-color: rgba(255, 255, 255, 0.15);
}

.arrow-upleft:before,
.arrow-upleft:after {
  left: 10%;
}

.modal-icon {
  display: inline-block;
  position: fixed;
  bottom: 30px;
  right: 30px;
  color: #666;
  text-align: center;
  animation: fadein 0.4s;
}

.modal-icon-inner {
  font-family: 'Times New Roman';
  display: inline-block;
  width: 25px;
  height: 25px;
  border: solid 1px rgba(0, 0, 0, 0.2);
  border-radius: 99px;
  color: black;
  background-color: whitesmoke;
  box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);
}

.dark .modal-icon-inner {
  color: white;
  background-color: black;
  box-shadow: 0 0 20px white;
}

.code-block {
  display: block;
  padding: 5px 10px;
  margin: 2px 5px 10px;
}

.mobile.drag-in-progress * {
  user-select: none;
}

.dragging {
  color: lightblue;
}

.indent {
  display: inline-block;
  margin-top: 5px;
  margin-left: 18px;
}

.tutorial-next-wait {
  margin-left: 10px;
  font-style: italic;
}

.tutorial-step-bullets {
  margin-bottom: 10px;
}

/* Prose View */

.SplitPane,
.SplitPane .Resizer,
.SplitPane .Pane {
  user-select: none;
}

.Resizer {
  background: #fff;
  opacity: 0.2;
  z-index: var(--z-index-resizer);
  box-sizing: border-box;
  background-clip: padding-box;
}

.Resizer:hover {
  transition: all 0.2s ease-out;
}

.Resizer.horizontal {
  height: 11px;
  margin: -5px 0;
  border-top: 5px solid rgba(255, 255, 255, 0);
  border-bottom: 5px solid rgba(255, 255, 255, 0);
  cursor: row-resize;
  width: 100%;
}

.Resizer.horizontal:hover {
  border-top: 5px solid rgba(0, 0, 0, 0.5);
  border-bottom: 5px solid rgba(0, 0, 0, 0.5);
}

.Resizer.vertical {
  width: 11px;
  margin: 0 -5px;
  border-left: 5px solid rgba(255, 255, 255, 0);
  border-right: 5px solid rgba(255, 255, 255, 0);
  cursor: col-resize;
}

.Resizer.vertical:hover {
  border-left: 5px solid rgba(255, 255, 255, 0.5);
  border-right: 5px solid rgba(255, 255, 255, 0.5);
}
.Resizer.disabled {
  cursor: not-allowed;
}
.Resizer.disabled:hover {
  border-color: transparent;
}
.SplitPane.animating .Pane {
  transition: width 0.2s ease;
}

.MuiDrawer-paperAnchorLeft {
  top: var(--safe-area-top) !important;
}

.ellipsized-path {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.icon {
  cursor: pointer;
  flex: 1;
  transition: all 0.1s ease-in-out;
}

.cp-clipboard-wrapper {
  margin-bottom: 15px;
  text-align: center;
}

.drop-down-wrapper {
  background-color: white;
  box-shadow: 0 0 10px 0px black;
  display: flex;
  flex-direction: column;
  justify-content: space-evenly;
  border: 1px solid white;
  position: absolute;
  right: 3px;
  padding: 0px 5px;
  z-index: var(--z-index-stack);
}

.drop-down-wrapper .drop-down-option-wrapper {
  cursor: pointer;
  padding: 2px 0px;
  border-top: 1px solid #444;
  transition: opacity 150ms ease-in;
}

.drop-down-wrapper .drop-down-option-wrapper:hover {
  opacity: 0.85;
}

.drop-down-wrapper .drop-down-option-wrapper:first-child {
  border-top: none;
}

.drop-down-wrapper .drop-down-option {
  display: flex;
  align-items: center;
  margin-left: 10px;
}

.drop-down-wrapper .drop-down-option .drop-down-label {
  margin-left: 10px;
  width: 95px;
}

.dark .drop-down-wrapper {
  background-color: black;
}

/* Publish */

.publish-meta {
  margin: 15px 0;
  font-size: 85%;
  overflow: hidden;
  line-height: 1.4;
}

.publish-meta .react-gravatar {
  margin: 10px 10px 10px 0;
  border-radius: 9999px;
  float: left;
}

.publish-meta .byline:first-of-type {
  margin-top: 15px;
}

.publish-meta .byline:nth-of-type(2) {
  opacity: 0.6;
}

.quick-add-button {
  display: inline-flex;
  transition: transform 200ms ease-in-out;
}

.latest-shortcuts-wrapper {
  position: absolute;
  /* Using vh here allows shortcuts diagram to always appear keyboard in mobile. */
  height: 100vh;
  width: 100%;
}

.latest-shortcuts .shortcut-tab {
  background: rgb(94, 94, 94);
  border-radius: 7px;
  display: flex;
  justify-content: center;
  align-items: center;
  opacity: 0.7;
  padding: 10px;
  margin: 0 2px;
}

.quick-add-button.rotate {
  transform: rotate(135deg);
}

@keyframes ellipsis {
  to {
    width: 1.25em;
  }
}

.loading-ellipsis:after {
  overflow: hidden;
  position: absolute;
  display: inline-block;
  vertical-align: bottom;
  -webkit-animation: ellipsis steps(4, end) 1000ms infinite;
  animation: ellipsis steps(4, end) 1000ms infinite;
  content: '\2026'; /* ascii code for the ellipsis character */
  width: 0;
  margin-left: 0.1em;
}

@keyframes toblack {
  to {
    color: black;
    fill: black;
  }
}

@keyframes towhite {
  to {
    color: white;
    fill: white;
  }
}

.gray {
  color: #666;
  fill: #666;
}

.graypulse {
  color: #666;
  fill: #666;
  -webkit-animation: toblack 400ms infinite alternate ease-in-out;
}

.dark .graypulse {
  -webkit-animation: towhite 400ms infinite alternate ease-in-out;
}

.no-select {
  user-select: none;
}

.empty-thoughtspace {
  animation: 0.4s ease-out 0s normal forwards fadein;
}

.advance-setting-wrapper {
  display: flex;
  justify-content: center;
  margin-bottom: 2em;
}

.advance-setting-chevron {
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  position: relative;
}

.advance-setting-section {
  display: flex;
  justify-content: center;
  margin: 0 auto;
  max-width: 34em;
  flex-direction: column;
}

.rotate180 {
  transform: rotate(180deg);
}
